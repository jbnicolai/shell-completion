#!/usr/bin/env node
'use strict';

/**
 * Module dependencies.
 */

var fs = require('fs'),
    path = require('path'),
    os = require('os'),
    pkg = require('../package'),
    program = require('commander'),
    chalk = require('chalk');

/**
 * Command line interface.
 */

program.version(pkg.version);

program
  .command('bash <completionfile>')
  .description('Link <completionfile> for usage in bash')
  .action(linkBash);

program
  .command('zsh <completionfile>')
  .description('Link <completionfile> for usage in zshell')
  .action(linkZsh);

program.parse(process.argv);

/**
 * Logging helpers.
 * Color arg1 and underline all subsequent arguments.
 */

function logError() {
  var args = Array.prototype.slice.call(arguments);
  var str = args.shift();

  args = args.map(function (a) { return chalk.underline(a); })
  args.splice(0, 0, chalk.red(str));

  console.error.apply(this, args);
}

function logSuccess() {
  var args = Array.prototype.slice.call(arguments);
  var str = args.shift();

  args = args.map(function (a) { return chalk.underline(a); })
  args.splice(0, 0, chalk.green(str));

  console.error.apply(this, args);
}

/**
 * The problem here that fs.exists() returns false for symbolic links
 * while this is exactly what we want to test for.
 *
 * Instead attempt fs.lstatSync(f), catch the error in case the link does
 * not exist and return either the fs.Stat() object or false
 */

function savelstat(d) {
  try {
    return fs.lstatSync(d);
  } catch (e) {
    return false;
  }
}

/**
 * Attempt to link f to d. Return falsy if d does not exist,
 * truthy if the link was succesful, and swallow any errors and
 * exit if anything goes wrong.
 *
 * The latter is because the expected usage of this script is
 * as a post install hook - and it is ussually undesirable to fail
 * the entire installation merely because the linking of shell
 * completion failed. ;-)
 */

function attemptLink(f, d) {
  if (fs.existsSync(d)) {
    var ln = path.join(d, path.basename(f)),
        lstat = savelstat(ln);

    if (lstat) {
      if (lstat.isSymbolicLink()) {
        logError('A symbolic link at %s already exists', ln);
      } else {
        console.log('%s already exists, and is not a symbolic link', ln)
      }
      process.exit();
    } else {
    // otherwise, create the link
      try {
        fs.symlinkSync(f, ln, 'file');
        logSuccess('Linked completion %s against %s', f, ln);
        return true;
      } catch (e) {
        logError('Failed linking against %s, error %s', ln, e);
        process.exit();
      }
    }
  }
}

function linkBash(f) {
  f = path.resolve(f);
  if (fs.existsSync(f)) {
    attemptLink(f, '/etc/bash_completion.d/') ||
    attemptLink(f, '/usr/local/etc/bash_completion.d/') ||
    logError('Failed to find suitable target location to link %s against', f);
  } else {
    logError('Cannot find <completion file> %s', f);
  }
}

function linkZsh(f) {
  f = path.resolve(f);
  if (fs.existsSync(f)) {
    attemptLink(f, '/usr/share/zsh/site-functions') ||
    logError('Failed to find suitable target location to link %s against', f);
  } else {
    logError('Cannot find <completion file> %s', f);
  }
}
